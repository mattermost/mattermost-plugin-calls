// Code generated by mockery v2.40.3. DO NOT EDIT.

package interfaces

import (
	model "github.com/mattermost/mattermost/server/public/model"
	models "github.com/mattermost/morph/models"
	mock "github.com/stretchr/testify/mock"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

type MockStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockStore) EXPECT() *MockStore_Expecter {
	return &MockStore_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockStore) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockStore_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockStore_Expecter) Close() *MockStore_Close_Call {
	return &MockStore_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockStore_Close_Call) Run(run func()) *MockStore_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockStore_Close_Call) Return(_a0 error) *MockStore_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Close_Call) RunAndReturn(run func() error) *MockStore_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetPost provides a mock function with given fields: postID
func (_m *MockStore) GetPost(postID string) (*model.Post, error) {
	ret := _m.Called(postID)

	if len(ret) == 0 {
		panic("no return value specified for GetPost")
	}

	var r0 *model.Post
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Post, error)); ok {
		return rf(postID)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Post); ok {
		r0 = rf(postID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Post)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(postID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_GetPost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPost'
type MockStore_GetPost_Call struct {
	*mock.Call
}

// GetPost is a helper method to define mock.On call
//   - postID string
func (_e *MockStore_Expecter) GetPost(postID interface{}) *MockStore_GetPost_Call {
	return &MockStore_GetPost_Call{Call: _e.mock.On("GetPost", postID)}
}

func (_c *MockStore_GetPost_Call) Run(run func(postID string)) *MockStore_GetPost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockStore_GetPost_Call) Return(_a0 *model.Post, _a1 error) *MockStore_GetPost_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_GetPost_Call) RunAndReturn(run func(string) (*model.Post, error)) *MockStore_GetPost_Call {
	_c.Call.Return(run)
	return _c
}

// KVGet provides a mock function with given fields: pluginID, key, fromWriter
func (_m *MockStore) KVGet(pluginID string, key string, fromWriter bool) ([]byte, error) {
	ret := _m.Called(pluginID, key, fromWriter)

	if len(ret) == 0 {
		panic("no return value specified for KVGet")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, bool) ([]byte, error)); ok {
		return rf(pluginID, key, fromWriter)
	}
	if rf, ok := ret.Get(0).(func(string, string, bool) []byte); ok {
		r0 = rf(pluginID, key, fromWriter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, bool) error); ok {
		r1 = rf(pluginID, key, fromWriter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockStore_KVGet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'KVGet'
type MockStore_KVGet_Call struct {
	*mock.Call
}

// KVGet is a helper method to define mock.On call
//   - pluginID string
//   - key string
//   - fromWriter bool
func (_e *MockStore_Expecter) KVGet(pluginID interface{}, key interface{}, fromWriter interface{}) *MockStore_KVGet_Call {
	return &MockStore_KVGet_Call{Call: _e.mock.On("KVGet", pluginID, key, fromWriter)}
}

func (_c *MockStore_KVGet_Call) Run(run func(pluginID string, key string, fromWriter bool)) *MockStore_KVGet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockStore_KVGet_Call) Return(_a0 []byte, _a1 error) *MockStore_KVGet_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockStore_KVGet_Call) RunAndReturn(run func(string, string, bool) ([]byte, error)) *MockStore_KVGet_Call {
	_c.Call.Return(run)
	return _c
}

// Migrate provides a mock function with given fields: direction, dryRun
func (_m *MockStore) Migrate(direction models.Direction, dryRun bool) error {
	ret := _m.Called(direction, dryRun)

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Direction, bool) error); ok {
		r0 = rf(direction, dryRun)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_Migrate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Migrate'
type MockStore_Migrate_Call struct {
	*mock.Call
}

// Migrate is a helper method to define mock.On call
//   - direction models.Direction
//   - dryRun bool
func (_e *MockStore_Expecter) Migrate(direction interface{}, dryRun interface{}) *MockStore_Migrate_Call {
	return &MockStore_Migrate_Call{Call: _e.mock.On("Migrate", direction, dryRun)}
}

func (_c *MockStore_Migrate_Call) Run(run func(direction models.Direction, dryRun bool)) *MockStore_Migrate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Direction), args[1].(bool))
	})
	return _c
}

func (_c *MockStore_Migrate_Call) Return(_a0 error) *MockStore_Migrate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_Migrate_Call) RunAndReturn(run func(models.Direction, bool) error) *MockStore_Migrate_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateFileInfoPostID provides a mock function with given fields: fileID, channelID, postID
func (_m *MockStore) UpdateFileInfoPostID(fileID string, channelID string, postID string) error {
	ret := _m.Called(fileID, channelID, postID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileInfoPostID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(fileID, channelID, postID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockStore_UpdateFileInfoPostID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateFileInfoPostID'
type MockStore_UpdateFileInfoPostID_Call struct {
	*mock.Call
}

// UpdateFileInfoPostID is a helper method to define mock.On call
//   - fileID string
//   - channelID string
//   - postID string
func (_e *MockStore_Expecter) UpdateFileInfoPostID(fileID interface{}, channelID interface{}, postID interface{}) *MockStore_UpdateFileInfoPostID_Call {
	return &MockStore_UpdateFileInfoPostID_Call{Call: _e.mock.On("UpdateFileInfoPostID", fileID, channelID, postID)}
}

func (_c *MockStore_UpdateFileInfoPostID_Call) Run(run func(fileID string, channelID string, postID string)) *MockStore_UpdateFileInfoPostID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockStore_UpdateFileInfoPostID_Call) Return(_a0 error) *MockStore_UpdateFileInfoPostID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockStore_UpdateFileInfoPostID_Call) RunAndReturn(run func(string, string, string) error) *MockStore_UpdateFileInfoPostID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockStore creates a new instance of MockStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
